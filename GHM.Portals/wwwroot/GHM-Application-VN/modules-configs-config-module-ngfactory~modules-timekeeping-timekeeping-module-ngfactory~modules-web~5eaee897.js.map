{"version":3,"sources":["webpack:///./node_modules/@angular/material/button/typings/index.d.ts.MatButton.html","webpack:///./node_modules/@angular/material/button/typings/index.d.ts.MatAnchor.html","webpack:///./node_modules/@angular/material/checkbox/typings/index.d.ts.MatCheckbox.html","webpack:///./node_modules/@angular/material/esm5/form-field.es5.js","webpack:///./src/app/shareds/components/nh-tree/nh-tree.component.ts.NHTreeComponent.html","webpack:///./src/app/shareds/components/nh-tree/nh-tree.component.ts","webpack:///./src/app/shareds/components/nh-tree/nh-tree.module.ts","webpack:///./src/app/shareds/decorator/check-permission.decorator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gLAAA,uJAAiC,8DAAY,IAAoB,00BAAgO,IAAM,4JAAsC,kDAAvH,mBAAmC,gBAA7E,mBAAyC,sBAAqC,mBAAsC,oBAA/N,YAAgO,EAA3E,SAAmC,EAA7E,SAAyC,EAAqC,SAAsC,mDAAtL,0CAAiE,iBAA1G,iGAAgO,EAAvL,SAAiE,EAA1G,SAAgO;;;;;;;gLCAjS,uJAAiC,8DAAY,IAAoB,00BAAgO,IAAM,4JAAsC,kDAAvH,mBAAmC,gBAA7E,mBAAyC,sBAAqC,mBAAsC,oBAA/N,YAAgO,EAA3E,SAAmC,EAA7E,SAAyC,EAAqC,SAAsC,mDAAtL,0CAAiE,iBAA1G,iGAAgO,EAAvL,SAAiE,EAA1G,SAAgO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0QCAjS,+KAA+D,2NAAgK,2fAAub,YAAvE;;wBAAsC;MAAC;;wBAA+B;MAAtb,wBAAub,+1BAA8M,GAA5C,wEAA2C,MAAO,sJAAgC,KAAM,2JAAqC,uQAA6G,sPAAoG,KAAM,2JAAoC,KAAkB,0OAA2F,YAA3C;;wBAA0C;MAA1F,mZAA2F,wJAA2B,mFAAM,KAAO,0DAAY,iDAApjB,qBAA0B,EAAjD,mBAAsB,EAA4B,kCAA2C,GAAvI,oBAAyC,sBAApE,yEAA0B,GAArE,YAA8M,EAAvE,UAA0B,EAAjD,UAAsB,EAA4B,UAA2C,EAAvI,UAAyC,EAApE,UAA0B,mDAAptB,mBAAoB,UAA3B,YAA+D,EAAxD,SAAoB,GAA8E,sJAAqH,uBAA/J,YAAgK,EAAtH,SAAqH,GAA8E,mBAAc,UAAC,mBAAqB,WAAC,mBAAmB,UAAC,mBAAoB,QAAC,mBAAqB,WAAC,mBAAkB,OAAC,mBAAqB,WAAC,mBAA+B,gBAAC,uCAAqC,GAAC,oBAAuC,iBAAC,oBAAuC,oBAA/W,eAA6E,SAAc,EAAC,SAAqB,EAAC,SAAmB,EAAC,SAAoB,EAAC,SAAqB,EAAC,SAAkB,EAAC,SAAqB,EAAC,SAA+B,EAAC,UAAqC,EAAC,UAAuC,EAAC,UAAuC,CAAwE,iHAA8M;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAp2B;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACuM;AAClJ;AACjC;AACK;AACO;AACe;AACb;AACR;AACP;AACI;;AAEvB;AACA;AACA,cAAc,WAAW;AACzB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA;AACA,gBAAgB,4DAAc;AAC9B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,sJAA8B,0CAA0C;AACxE;AACA,+EAAmB,6CAA6C;AAChE;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA;AACA,mBAAmB,4DAAc;AACjC,gBAAgB,4DAAc;AAC9B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,iCAAiC,EAAE;AACxD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,oCAAoC,EAAE;AAC3D;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,wBAAwB,EAAE;AAC/C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oHAA6D,EAAE;AAC/D;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,EAAE;AACzB;AACA,oCAAoC,gDAAgD,EAAE;AACtF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gDAAgD,iCAAiC,EAAE;AACnF;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,wCAAwC,EAAE;AAC1C;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,+BAA+B,EAAE;AACjC,6DAA6D,+BAA+B,EAAE;AAC9F,+BAA+B,EAAE;AACjC,6DAA6D,6BAA6B,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,iBAAiB,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,qEAAqE,gBAAgB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B;AACnC;AACA,64BAA64B,sBAAsB,gQAAgQ,63CAA63C,WAAW;AAC3iF;AACA;AACA;AACA,8CAA8C,qBAAqB,kBAAkB,gBAAgB,0BAA0B,iBAAiB,wBAAwB,kBAAkB,qBAAqB,oBAAoB,qBAAqB,sBAAsB,WAAW,8CAA8C,mBAAmB,UAAU,kBAAkB,sBAAsB,cAAc,kBAAkB,UAAU,YAAY,YAAY,8BAA8B,kBAAkB,OAAO,uBAAuB,WAAW,YAAY,gBAAgB,oBAAoB,sBAAsB,kBAAkB,OAAO,aAAa,oBAAoB,WAAW,mBAAmB,uBAAuB,gBAAgB,qBAAqB,8HAA8H,aAAa,gCAAgC,wBAAwB,UAAU,QAAQ,uHAAuH,cAAc,sGAAsG,aAAa,gIAAgI,cAAc,gBAAgB,uLAAuL,aAAa,2OAA2O,cAAc,iDAAiD,gBAAgB,0BAA0B,kBAAkB,WAAW,oBAAoB,yBAAyB,uBAAuB,kBAAkB,OAAO,WAAW,qBAAqB,qBAAqB,UAAU,2DAA2D,iHAAiH,UAAU,oBAAoB,2IAA2I,kCAAkC,kBAAkB,sBAAsB,WAAW,gBAAgB,oFAAoF,UAAU,WAAW,kBAAkB,wBAAwB,6BAA6B,aAAa,4BAA4B,aAAa,WAAW,cAAc,sDAAsD,0BAA0B,4BAA4B,kEAAkE,WAAW,cAAc,kBAAkB,SAAS,WAAW,WAAW,uDAAuD,SAAS,WAAW,0IAA0I,UAAU,eAAe,kDAAkD,kEAAkE,cAAc,yDAAyD,6BAA6B,mBAAmB,sIAAsI,UAAU,oJAAoJ,aAAa,wBAAwB,wKAAwK,kBAAkB,4DAA4D,WAAW,yDAAyD,MAAM,WAAW,oFAAoF,sBAAsB,6BAA6B,kGAAkG,WAAW,4DAA4D,eAAe,wDAAwD,wBAAwB,kBAAkB,oHAAoH,UAAU,2DAA2D,aAAa,kBAAkB,MAAM,OAAO,QAAQ,oBAAoB,gIAAgI,8BAA8B,cAAc,iEAAiE,0BAA0B,wBAAwB,2EAA2E,yBAAyB,uBAAuB,0BAA0B,+DAA+D,0BAA0B,uBAAuB,YAAY,yEAAyE,wBAAwB,wBAAwB,0BAA0B,+DAA+D,wBAAwB,8BAA8B,uBAAuB,wBAAwB,oHAAoH,6BAA6B,iEAAiE,UAAU,yRAAyR,iBAAiB,uDAAuD,yJAAyJ,UAAU,kDAAkD,qKAAqK,UAAU,oHAAoH,UAAU,kDAAkD,0HAA0H,UAAU,qEAAqE,cAAc,0DAA0D,kBAAkB,8DAA8D,WAAW,2DAA2D,SAAS,WAAW,sFAAsF,sBAAsB,6BAA6B,8IAA8I,UAAU,eAAe,kDAAkD,oBAAoB,aAAa,eAAe,mBAAmB,YAAY,UAAU,UAAU,SAAS,WAAW,eAAe,sBAAsB,mBAAmB,mCAAmC,gBAAgB,6DAA6D,aAAa,6OAA6O,YAAY,gBAAgB,UAAU,gCAAgC,sDAAsD,qCAAqC,sDAAsD,8CAA8C,sDAAsD,yCAAyC,sDAAsD,iEAAiE,4BAA4B,gBAAgB,sEAAsE,4BAA4B,gBAAgB,+EAA+E,4BAA4B,gBAAgB,0EAA0E,4BAA4B,gBAAgB,2BAA2B,gBAAgB,cAAc,iDAAiD,YAAY,2BAA2B,cAAc,cAAc;AACliS;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,+CAA+C;AAC/C,SAAS,kEAAoB;AAC7B,SAAS,yEAA2B;AACpC,SAAS,gCAAgC,+DAAiB,GAAG,uJAAkD,IAAI;AACnH,SAAS,uFAAqC,+DAAiB,IAAI;AACnE,SAAS,gCAAgC,+DAAiB,GAAG,sGAAwD,IAAI;AACzH,SAAS,wEAAkB;AAC3B,MAAM;AACN;AACA,wBAAwB,4DAAc;AACtC,gCAAgC,4DAAc;AAC9C,uBAAuB,4DAAc;AACrC,wBAAwB,4DAAc;AACtC,0BAA0B,sFAAwC;AAClE,qCAAqC,gGAAkD;AACvF,gCAAgC,2FAA6C;AAC7E,oBAAoB,kFAAoC;AACxD,sBAAsB,iGAAmD;AACzE,+BAA+B,4FAA8C;AAC7E,yBAAyB,sFAAwC;AACjE,4BAA4B,yFAA2C;AACvE,2BAA2B,wFAA0C;AACrE,6BAA6B,0FAA4C;AACzE,6BAA6B,0FAA4C;AACzE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;;AAEQ;AACR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qGChzBY,kKACuC,KACnC,6RAKC,YAJE;;wBAAsB;MADzB,wBAKC,KAGD,+MAA4E,YAApD;;wBAA0B;MAAlD,wBAA4E,KACxE,2jBACiF,IAAI,6EAEzF,MACA,sLAIoD,YAA3C;;wBAA0C;MAJnD,8dAIoD,mDAR7C,8BAAoB,EACpB,oHAA6E,GADhF,YACiF,EAD9E,SAAoB,EACpB,SAA6E,GAG3E,kBAAsB,6BACtB,mBAAyB,aADF,qBAAmB,EAAC,mBAA4B,iCAEvE,oBAA2B,cAC3B,oBAA2B,cAHpC,YAIoD,EAJ3C,SAAsB,EACtB,SAAyB,EADF,UAAmB,EAAC,UAA4B,EAEvE,UAA2B,EAC3B,UAA2B,2BAjBpC,kBAAkC,+BADtC,YACuC,EAAnC,SAAkC,GAG/B,4HAAkF,IAClF,iNAA4I,MAC5I,gNAA0I,MAJ7I,YAKC,EAHE,SAAkF,EAClF,SAA4I,EAC5I,SAA0I,GAI1F,kBAAwB,yBAA3E,YAA4E,EAAzB,SAAwB,GAEc,kEAEzF;qGAhBR,yiBACuE,IACnE,idACuC,iDAHvC,sEAA6D,GAAjE,YACuE,EADnE,SAA6D,GAEpC,mBAAyB,OAAlD,YACuC,EADd,SAAyB,mDADlD,gEAAkE,GADtE,YACuE,EAAnE,SAAkE;;;;;;;;;;;;;;;;;;;;;;ACDvD;AAEK;AACsB;AAGlD;IAoEI,yBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAT3B,eAAU,GAAG,KAAK,CAAC;QACnB,eAAU,GAAG,KAAK,CAAC;QACnB,WAAM,GAAG,IAAI,CAAC;QAEd,gBAAW,GAAG,EAAE,CAAC;QAEhB,iBAAY,GAAG,IAAI,0DAAY,EAAE,CAAC;QAClC,iBAAY,GAAG,IAAI,0DAAY,EAAE,CAAC;IAG5C,CAAC;IAED,kCAAQ,GAAR;IACA,CAAC;IAED,qCAAW,GAAX,UAAY,OAAsB;QAAlC,iBAOC;QANG,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjC,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC;YAC1C,2CAAM,CAAC,IAAI,EAAE,UAAC,QAAkB;gBAC5B,QAAQ,CAAC,UAAU,GAAG,KAAI,CAAC,WAAW,IAAI,KAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAC/G,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IAED,oCAAU,GAAV,UAAW,IAAc;QACrB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;QACvC,CAAC;QACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,gCAAM,GAAN,UAAO,IAAc;QACjB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,EAAI,CAAC,CAAC;YACjE,SAAS,CAAC,SAAS,CAAC,UAAC,MAAW;gBAC5B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBACvB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;YAC3B,CAAC,CAAC,CAAC;QACP,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QACvC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAEO,2CAAiB,GAAzB,UAA0B,SAAqB,EAAE,QAAiB;QAAlE,iBAeC;QAdG,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC;QACX,CAAC;QAED,2CAAM,CAAC,SAAS,EAAE,UAAC,IAAc;YAC7B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YAExB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC7B,2CAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAC,IAAc;oBACjC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;oBACxB,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;gBACnD,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACL,sBAAC;AAAD,CAAC;;;;;;;;;;;;;;;ACzHD;AAAA;IAAA;IAQ4B,CAAC;IAAD,mBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXvB;IACF,MAAM,CAAC,UAAU,MAAW;QACxB,MAAM,CAAC,SAAS,CAAC,eAAe,GAAG;YAAA,iBAYlC;YANG,UAAU,CAAC;gBACP,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,UAAU,CAAC,qBAAqB,EAAE,CAAC;gBAC1D,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;oBACxB,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;gBACnD,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;QAEF,gCAAgC;QAChC,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC,CAAC;AACN,CAAC","file":"modules-configs-config-module-ngfactory~modules-timekeeping-timekeeping-module-ngfactory~modules-web~5eaee897.js","sourcesContent":["<span class=\"mat-button-wrapper\"><ng-content></ng-content></span><div matRipple class=\"mat-button-ripple\" [class.mat-button-ripple-round]=\"_isRoundButton || _isIconButton\" [matRippleDisabled]=\"_isRippleDisabled()\" [matRippleCentered]=\"_isIconButton\" [matRippleTrigger]=\"_getHostElement()\"></div><div class=\"mat-button-focus-overlay\"></div>","<span class=\"mat-button-wrapper\"><ng-content></ng-content></span><div matRipple class=\"mat-button-ripple\" [class.mat-button-ripple-round]=\"_isRoundButton || _isIconButton\" [matRippleDisabled]=\"_isRippleDisabled()\" [matRippleCentered]=\"_isIconButton\" [matRippleTrigger]=\"_getHostElement()\"></div><div class=\"mat-button-focus-overlay\"></div>","<label [attr.for]=\"inputId\" class=\"mat-checkbox-layout\" #label><div class=\"mat-checkbox-inner-container\" [class.mat-checkbox-inner-container-no-side-margin]=\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\"><input #input class=\"mat-checkbox-input cdk-visually-hidden\" type=\"checkbox\" [id]=\"inputId\" [required]=\"required\" [checked]=\"checked\" [attr.value]=\"value\" [disabled]=\"disabled\" [attr.name]=\"name\" [tabIndex]=\"tabIndex\" [indeterminate]=\"indeterminate\" [attr.aria-label]=\"ariaLabel || null\" [attr.aria-labelledby]=\"ariaLabelledby\" [attr.aria-checked]=\"_getAriaChecked()\" (change)=\"_onInteractionEvent($event)\" (click)=\"_onInputClick($event)\"><div matRipple class=\"mat-checkbox-ripple\" [matRippleTrigger]=\"label\" [matRippleDisabled]=\"_isRippleDisabled()\" [matRippleRadius]=\"25\" [matRippleCentered]=\"true\" [matRippleAnimation]=\"{enterDuration: 150}\"></div><div class=\"mat-checkbox-frame\"></div><div class=\"mat-checkbox-background\"><svg version=\"1.1\" focusable=\"false\" class=\"mat-checkbox-checkmark\" viewBox=\"0 0 24 24\" xml:space=\"preserve\"><path class=\"mat-checkbox-checkmark-path\" fill=\"none\" stroke=\"white\" d=\"M4.1,12.7 9,17.6 20.3,6.3\"/></svg><div class=\"mat-checkbox-mixedmark\"></div></div></div><span class=\"mat-checkbox-label\" #checkboxLabel (cdkObserveContent)=\"_onLabelTextChange()\"><span style=\"display:none\">&nbsp;</span><ng-content></ng-content></span></label>","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, Input, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, Inject, InjectionToken, Optional, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { __extends } from 'tslib';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MAT_LABEL_GLOBAL_OPTIONS, mixinColor } from '@angular/material/core';\nimport { EMPTY, fromEvent, merge } from 'rxjs';\nimport { startWith, take } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ nextUniqueId = 0;\n/**\n * Single error message to be shown underneath the form field.\n */\nvar MatError = /** @class */ (function () {\n    function MatError() {\n        this.id = \"mat-error-\" + nextUniqueId++;\n    }\n    MatError.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-error',\n                    host: {\n                        'class': 'mat-error',\n                        'role': 'alert',\n                        '[attr.id]': 'id',\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    MatError.propDecorators = {\n        \"id\": [{ type: Input },],\n    };\n    return MatError;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Animations used by the MatFormField.\n */\nvar /** @type {?} */ matFormFieldAnimations = {\n    /** Animation that transitions the form field's error and hint messages. */\n    transitionMessages: trigger('transitionMessages', [\n        // TODO(mmalerba): Use angular animations for label animation as well.\n        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n        transition('void => enter', [\n            style({ opacity: 0, transform: 'translateY(-100%)' }),\n            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * An interface which allows a control to work inside of a `MatFormField`.\n * @abstract\n * @template T\n */\nvar  /**\n * An interface which allows a control to work inside of a `MatFormField`.\n * @abstract\n * @template T\n */\nMatFormFieldControl = /** @class */ (function () {\n    function MatFormFieldControl() {\n    }\n    return MatFormFieldControl;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getMatFormFieldPlaceholderConflictError() {\n    return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nfunction getMatFormFieldDuplicatedHintError(align) {\n    return Error(\"A hint was already declared for 'align=\\\"\" + align + \"\\\"'.\");\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getMatFormFieldMissingControlError() {\n    return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ nextUniqueId$1 = 0;\n/**\n * Hint text to be shown underneath the form field control.\n */\nvar MatHint = /** @class */ (function () {\n    function MatHint() {\n        /**\n         * Whether to align the hint label at the start or end of the line.\n         */\n        this.align = 'start';\n        /**\n         * Unique ID for the hint. Used for the aria-describedby on the form field control.\n         */\n        this.id = \"mat-hint-\" + nextUniqueId$1++;\n    }\n    MatHint.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-hint',\n                    host: {\n                        'class': 'mat-hint',\n                        '[class.mat-right]': 'align == \"end\"',\n                        '[attr.id]': 'id',\n                        // Remove align attribute to prevent it from interfering with layout.\n                        '[attr.align]': 'null',\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    MatHint.propDecorators = {\n        \"align\": [{ type: Input },],\n        \"id\": [{ type: Input },],\n    };\n    return MatHint;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * The floating label for a `mat-form-field`.\n */\nvar MatLabel = /** @class */ (function () {\n    function MatLabel() {\n    }\n    MatLabel.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-label'\n                },] },\n    ];\n    return MatLabel;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * \\@deletion-target 8.0.0\n */\nvar MatPlaceholder = /** @class */ (function () {\n    function MatPlaceholder() {\n    }\n    MatPlaceholder.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-placeholder'\n                },] },\n    ];\n    return MatPlaceholder;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Prefix to be placed the the front of the form field.\n */\nvar MatPrefix = /** @class */ (function () {\n    function MatPrefix() {\n    }\n    MatPrefix.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matPrefix]',\n                },] },\n    ];\n    return MatPrefix;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Suffix to be placed at the end of the form field.\n */\nvar MatSuffix = /** @class */ (function () {\n    function MatSuffix() {\n    }\n    MatSuffix.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matSuffix]',\n                },] },\n    ];\n    return MatSuffix;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ nextUniqueId$2 = 0;\nvar /** @type {?} */ floatingLabelScale = 0.75;\nvar /** @type {?} */ outlineGapPadding = 5;\n/**\n * \\@docs-private\n */\nvar  /**\n * \\@docs-private\n */\nMatFormFieldBase = /** @class */ (function () {\n    function MatFormFieldBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatFormFieldBase;\n}());\nvar /** @type {?} */ _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\nvar /** @type {?} */ MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n/**\n * Container for form controls that applies Material Design styling and behavior.\n */\nvar MatFormField = /** @class */ (function (_super) {\n    __extends(MatFormField, _super);\n    function MatFormField(_elementRef, _changeDetectorRef, labelOptions, _dir, _defaultOptions, _platform) {\n        var _this = _super.call(this, _elementRef) || this;\n        _this._elementRef = _elementRef;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._dir = _dir;\n        _this._defaultOptions = _defaultOptions;\n        _this._platform = _platform;\n        /**\n         * Override for the logic that disables the label animation in certain cases.\n         */\n        _this._showAlwaysAnimate = false;\n        /**\n         * State of the mat-hint and mat-error animations.\n         */\n        _this._subscriptAnimationState = '';\n        _this._hintLabel = '';\n        // Unique id for the hint label.\n        _this._hintLabelId = \"mat-hint-\" + nextUniqueId$2++;\n        _this._outlineGapWidth = 0;\n        _this._outlineGapStart = 0;\n        _this._initialGapCalculated = false;\n        _this._labelOptions = labelOptions ? labelOptions : {};\n        _this.floatLabel = _this._labelOptions.float || 'auto';\n        return _this;\n    }\n    Object.defineProperty(MatFormField.prototype, \"appearance\", {\n        get: /**\n         * The form-field appearance style.\n         * @return {?}\n         */\n        function () {\n            return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._appearance = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatFormField.prototype, \"hideRequiredMarker\", {\n        get: /**\n         * Whether the required marker should be hidden.\n         * @return {?}\n         */\n        function () { return this._hideRequiredMarker; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._hideRequiredMarker = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatFormField.prototype, \"_shouldAlwaysFloat\", {\n        /** Whether the floating label should always float or not. */\n        get: /**\n         * Whether the floating label should always float or not.\n         * @return {?}\n         */\n        function () {\n            return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatFormField.prototype, \"_canLabelFloat\", {\n        /** Whether the label can float or not. */\n        get: /**\n         * Whether the label can float or not.\n         * @return {?}\n         */\n        function () { return this.floatLabel !== 'never'; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatFormField.prototype, \"hintLabel\", {\n        get: /**\n         * Text for the form field hint.\n         * @return {?}\n         */\n        function () { return this._hintLabel; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._hintLabel = value;\n            this._processHints();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatFormField.prototype, \"floatLabel\", {\n        get: /**\n         * Whether the label should always float, never float or float as the user types.\n         *\n         * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n         * way to make the floating label emulate the behavior of a standard input placeholder. However\n         * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n         * appearances the `never` option has been disabled in favor of just using the placeholder.\n         * @return {?}\n         */\n        function () {\n            return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value !== this._floatLabel) {\n                this._floatLabel = value || this._labelOptions.float || 'auto';\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     * @return {?}\n     */\n    MatFormField.prototype.getConnectedOverlayOrigin = /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     * @return {?}\n     */\n    function () {\n        return this._connectionContainerRef || this._elementRef;\n    };\n    /**\n     * @return {?}\n     */\n    MatFormField.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(\"mat-form-field-type-\" + this._control.controlType);\n        }\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith(/** @type {?} */ ((null)))).subscribe(function () {\n            _this._validatePlaceholders();\n            _this._syncDescribedByIds();\n            _this._changeDetectorRef.markForCheck();\n        });\n        // Run change detection if the value, prefix, or suffix changes.\n        var /** @type {?} */ valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n        merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n            .subscribe(function () { return _this._changeDetectorRef.markForCheck(); });\n        // Re-validate when the number of hints changes.\n        this._hintChildren.changes.pipe(startWith(null)).subscribe(function () {\n            _this._processHints();\n            _this._changeDetectorRef.markForCheck();\n        });\n        // Update the aria-described by when the number of errors changes.\n        this._errorChildren.changes.pipe(startWith(null)).subscribe(function () {\n            _this._syncDescribedByIds();\n            _this._changeDetectorRef.markForCheck();\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MatFormField.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._validateControlChild();\n        if (!this._initialGapCalculated) {\n            Promise.resolve().then(function () { return _this.updateOutlineGap(); });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatFormField.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        // Avoid animations on load.\n        this._subscriptAnimationState = 'enter';\n        this._changeDetectorRef.detectChanges();\n    };\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    /**\n     * Determines whether a class from the NgControl should be forwarded to the host element.\n     * @param {?} prop\n     * @return {?}\n     */\n    MatFormField.prototype._shouldForward = /**\n     * Determines whether a class from the NgControl should be forwarded to the host element.\n     * @param {?} prop\n     * @return {?}\n     */\n    function (prop) {\n        var /** @type {?} */ ngControl = this._control ? this._control.ngControl : null;\n        return ngControl && (/** @type {?} */ (ngControl))[prop];\n    };\n    /**\n     * @return {?}\n     */\n    MatFormField.prototype._hasPlaceholder = /**\n     * @return {?}\n     */\n    function () {\n        return !!(this._control && this._control.placeholder || this._placeholderChild);\n    };\n    /**\n     * @return {?}\n     */\n    MatFormField.prototype._hasLabel = /**\n     * @return {?}\n     */\n    function () {\n        return !!this._labelChild;\n    };\n    /**\n     * @return {?}\n     */\n    MatFormField.prototype._shouldLabelFloat = /**\n     * @return {?}\n     */\n    function () {\n        return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n    };\n    /**\n     * @return {?}\n     */\n    MatFormField.prototype._hideControlPlaceholder = /**\n     * @return {?}\n     */\n    function () {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this.appearance === 'legacy' && !this._hasLabel() ||\n            this._hasLabel() && !this._shouldLabelFloat();\n    };\n    /**\n     * @return {?}\n     */\n    MatFormField.prototype._hasFloatingLabel = /**\n     * @return {?}\n     */\n    function () {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n    };\n    /** Determines whether to display hints or errors. */\n    /**\n     * Determines whether to display hints or errors.\n     * @return {?}\n     */\n    MatFormField.prototype._getDisplayedMessages = /**\n     * Determines whether to display hints or errors.\n     * @return {?}\n     */\n    function () {\n        return (this._errorChildren && this._errorChildren.length > 0 &&\n            this._control.errorState) ? 'error' : 'hint';\n    };\n    /** Animates the placeholder up and locks it in position. */\n    /**\n     * Animates the placeholder up and locks it in position.\n     * @return {?}\n     */\n    MatFormField.prototype._animateAndLockLabel = /**\n     * Animates the placeholder up and locks it in position.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._hasFloatingLabel() && this._canLabelFloat) {\n            this._showAlwaysAnimate = true;\n            this.floatLabel = 'always';\n            fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(function () {\n                _this._showAlwaysAnimate = false;\n            });\n            this._changeDetectorRef.markForCheck();\n        }\n    };\n    /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     * @return {?}\n     */\n    MatFormField.prototype._validatePlaceholders = /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     * @return {?}\n     */\n    function () {\n        if (this._control.placeholder && this._placeholderChild) {\n            throw getMatFormFieldPlaceholderConflictError();\n        }\n    };\n    /**\n     * Does any extra processing that is required when handling the hints.\n     * @return {?}\n     */\n    MatFormField.prototype._processHints = /**\n     * Does any extra processing that is required when handling the hints.\n     * @return {?}\n     */\n    function () {\n        this._validateHints();\n        this._syncDescribedByIds();\n    };\n    /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     * @return {?}\n     */\n    MatFormField.prototype._validateHints = /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._hintChildren) {\n            var /** @type {?} */ startHint_1;\n            var /** @type {?} */ endHint_1;\n            this._hintChildren.forEach(function (hint) {\n                if (hint.align === 'start') {\n                    if (startHint_1 || _this.hintLabel) {\n                        throw getMatFormFieldDuplicatedHintError('start');\n                    }\n                    startHint_1 = hint;\n                }\n                else if (hint.align === 'end') {\n                    if (endHint_1) {\n                        throw getMatFormFieldDuplicatedHintError('end');\n                    }\n                    endHint_1 = hint;\n                }\n            });\n        }\n    };\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     * @return {?}\n     */\n    MatFormField.prototype._syncDescribedByIds = /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     * @return {?}\n     */\n    function () {\n        if (this._control) {\n            var /** @type {?} */ ids = [];\n            if (this._getDisplayedMessages() === 'hint') {\n                var /** @type {?} */ startHint = this._hintChildren ?\n                    this._hintChildren.find(function (hint) { return hint.align === 'start'; }) : null;\n                var /** @type {?} */ endHint = this._hintChildren ?\n                    this._hintChildren.find(function (hint) { return hint.align === 'end'; }) : null;\n                if (startHint) {\n                    ids.push(startHint.id);\n                }\n                else if (this._hintLabel) {\n                    ids.push(this._hintLabelId);\n                }\n                if (endHint) {\n                    ids.push(endHint.id);\n                }\n            }\n            else if (this._errorChildren) {\n                ids = this._errorChildren.map(function (error) { return error.id; });\n            }\n            this._control.setDescribedByIds(ids);\n        }\n    };\n    /** Throws an error if the form field's control is missing. */\n    /**\n     * Throws an error if the form field's control is missing.\n     * @return {?}\n     */\n    MatFormField.prototype._validateControlChild = /**\n     * Throws an error if the form field's control is missing.\n     * @return {?}\n     */\n    function () {\n        if (!this._control) {\n            throw getMatFormFieldMissingControlError();\n        }\n    };\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     */\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     * @return {?}\n     */\n    MatFormField.prototype.updateOutlineGap = /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     * @return {?}\n     */\n    function () {\n        if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n            if (this._platform && !this._platform.isBrowser) {\n                // getBoundingClientRect isn't available on the server.\n                this._initialGapCalculated = true;\n                return;\n            }\n            if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n                return;\n            }\n            var /** @type {?} */ containerStart = this._getStartEnd(this._connectionContainerRef.nativeElement.getBoundingClientRect());\n            var /** @type {?} */ labelStart = this._getStartEnd(this._label.nativeElement.children[0].getBoundingClientRect());\n            var /** @type {?} */ labelWidth = 0;\n            for (var _i = 0, _a = this._label.nativeElement.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                labelWidth += child.offsetWidth;\n            }\n            this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n            this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n        }\n        else {\n            this._outlineGapStart = 0;\n            this._outlineGapWidth = 0;\n        }\n        this._initialGapCalculated = true;\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Gets the start end of the rect considering the current directionality.\n     * @param {?} rect\n     * @return {?}\n     */\n    MatFormField.prototype._getStartEnd = /**\n     * Gets the start end of the rect considering the current directionality.\n     * @param {?} rect\n     * @return {?}\n     */\n    function (rect) {\n        return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n    };\n    MatFormField.decorators = [\n        { type: Component, args: [{selector: 'mat-form-field',\n                    exportAs: 'matFormField',\n                    template: \"<div class=\\\"mat-form-field-wrapper\\\"><div class=\\\"mat-form-field-flex\\\" #connectionContainer (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\"><div class=\\\"mat-form-field-prefix\\\" *ngIf=\\\"_prefixChildren.length\\\"><ng-content select=\\\"[matPrefix]\\\"></ng-content></div><div class=\\\"mat-form-field-infix\\\" #inputContainer><ng-content></ng-content><span class=\\\"mat-form-field-label-wrapper\\\"><label class=\\\"mat-form-field-label\\\" [attr.for]=\\\"_control.id\\\" [attr.aria-owns]=\\\"_control.id\\\" [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat\\\" [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat\\\" [class.mat-accent]=\\\"color == 'accent'\\\" [class.mat-warn]=\\\"color == 'warn'\\\" #label *ngIf=\\\"_hasFloatingLabel()\\\" [ngSwitch]=\\\"_hasLabel()\\\"><ng-container *ngSwitchCase=\\\"false\\\"><ng-content select=\\\"mat-placeholder\\\"></ng-content>{{_control.placeholder}}</ng-container><ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content><span class=\\\"mat-placeholder-required mat-form-field-required-marker\\\" aria-hidden=\\\"true\\\" *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&nbsp;*</span></label></span></div><div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\"><ng-content select=\\\"[matSuffix]\\\"></ng-content></div></div><div class=\\\"mat-form-field-underline\\\" #underline *ngIf=\\\"appearance != 'outline'\\\"><span class=\\\"mat-form-field-ripple\\\" [class.mat-accent]=\\\"color == 'accent'\\\" [class.mat-warn]=\\\"color == 'warn'\\\"></span></div><ng-container *ngIf=\\\"appearance == 'outline'\\\"><div class=\\\"mat-form-field-outline\\\"><div class=\\\"mat-form-field-outline-start\\\" [style.width.px]=\\\"_outlineGapStart\\\"></div><div class=\\\"mat-form-field-outline-gap\\\" [style.width.px]=\\\"_outlineGapWidth\\\"></div><div class=\\\"mat-form-field-outline-end\\\"></div></div><div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\"><div class=\\\"mat-form-field-outline-start\\\" [style.width.px]=\\\"_outlineGapStart\\\"></div><div class=\\\"mat-form-field-outline-gap\\\" [style.width.px]=\\\"_outlineGapWidth\\\"></div><div class=\\\"mat-form-field-outline-end\\\"></div></div></ng-container><div class=\\\"mat-form-field-subscript-wrapper\\\" [ngSwitch]=\\\"_getDisplayedMessages()\\\"><div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\"><ng-content select=\\\"mat-error\\\"></ng-content></div><div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\"><div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div><ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content><div class=\\\"mat-form-field-hint-spacer\\\"></div><ng-content select=\\\"mat-hint[align='end']\\\"></ng-content></div></div></div>\",\n                    // MatInput is a directive and can't have styles, so we need to include its styles here.\n                    // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n                    // aren't using MatInput.\n                    styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),color .4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,.mat-form-field-empty.mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scaleY(1.0001)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(.5);opacity:0;transition:background-color .3s cubic-bezier(.55,0,.55,.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:scaleX(1);transition:transform .3s cubic-bezier(.25,.8,.25,1),opacity .1s cubic-bezier(.25,.8,.25,1),background-color .3s cubic-bezier(.25,.8,.25,1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-label-wrapper .mat-icon,.mat-form-field-subscript-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block} .mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:'';display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em} .mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px} .mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-.25em}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:0;left:0;right:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-start{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start{border-width:2px;transition:border-color .3s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity .1s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline{opacity:0;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em} .mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity .6s cubic-bezier(.25,.8,.25,1)} .mat-input-element{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element[type=date]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=month]::after,.mat-input-element[type=time]::after,.mat-input-element[type=week]::after{content:' ';white-space:pre;width:1px}.mat-input-element::placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::-moz-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::-webkit-input-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element:-ms-input-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent!important;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent!important;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent!important;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent!important;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}\"],\n                    animations: [matFormFieldAnimations.transitionMessages],\n                    host: {\n                        'class': 'mat-form-field',\n                        '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n                        '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n                        '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n                        '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n                        '[class.mat-form-field-invalid]': '_control.errorState',\n                        '[class.mat-form-field-can-float]': '_canLabelFloat',\n                        '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n                        '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n                        '[class.mat-form-field-disabled]': '_control.disabled',\n                        '[class.mat-form-field-autofilled]': '_control.autofilled',\n                        '[class.mat-focused]': '_control.focused',\n                        '[class.mat-accent]': 'color == \"accent\"',\n                        '[class.mat-warn]': 'color == \"warn\"',\n                        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n                        '[class.ng-touched]': '_shouldForward(\"touched\")',\n                        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n                        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n                        '[class.ng-valid]': '_shouldForward(\"valid\")',\n                        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n                        '[class.ng-pending]': '_shouldForward(\"pending\")',\n                    },\n                    inputs: ['color'],\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /** @nocollapse */\n    MatFormField.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: ChangeDetectorRef, },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] },] },\n        { type: Directionality, decorators: [{ type: Optional },] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD_DEFAULT_OPTIONS,] },] },\n        { type: Platform, },\n    ]; };\n    MatFormField.propDecorators = {\n        \"appearance\": [{ type: Input },],\n        \"hideRequiredMarker\": [{ type: Input },],\n        \"hintLabel\": [{ type: Input },],\n        \"floatLabel\": [{ type: Input },],\n        \"underlineRef\": [{ type: ViewChild, args: ['underline',] },],\n        \"_connectionContainerRef\": [{ type: ViewChild, args: ['connectionContainer',] },],\n        \"_inputContainerRef\": [{ type: ViewChild, args: ['inputContainer',] },],\n        \"_label\": [{ type: ViewChild, args: ['label',] },],\n        \"_control\": [{ type: ContentChild, args: [MatFormFieldControl,] },],\n        \"_placeholderChild\": [{ type: ContentChild, args: [MatPlaceholder,] },],\n        \"_labelChild\": [{ type: ContentChild, args: [MatLabel,] },],\n        \"_errorChildren\": [{ type: ContentChildren, args: [MatError,] },],\n        \"_hintChildren\": [{ type: ContentChildren, args: [MatHint,] },],\n        \"_prefixChildren\": [{ type: ContentChildren, args: [MatPrefix,] },],\n        \"_suffixChildren\": [{ type: ContentChildren, args: [MatSuffix,] },],\n    };\n    return MatFormField;\n}(_MatFormFieldMixinBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatFormFieldModule = /** @class */ (function () {\n    function MatFormFieldModule() {\n    }\n    MatFormFieldModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        MatError,\n                        MatFormField,\n                        MatHint,\n                        MatLabel,\n                        MatPlaceholder,\n                        MatPrefix,\n                        MatSuffix,\n                    ],\n                    imports: [CommonModule],\n                    exports: [\n                        MatError,\n                        MatFormField,\n                        MatHint,\n                        MatLabel,\n                        MatPlaceholder,\n                        MatPrefix,\n                        MatSuffix,\n                    ],\n                },] },\n    ];\n    return MatFormFieldModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatFormFieldModule, MatError, MatFormFieldBase, _MatFormFieldMixinBase, MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormField, MatFormFieldControl, getMatFormFieldPlaceholderConflictError, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, MatHint, MatPlaceholder, MatPrefix, MatSuffix, MatLabel, matFormFieldAnimations };\n//# sourceMappingURL=form-field.es5.js.map\n","\n        <!-- nh tree -->\n        <ul [ngClass]=\"!isChildren ? 'nh-tree nh-root-tree' : 'sub-tree'\"\n            [@toogleTreeSubmenu]=\"isOpen ? 'sub-tree-open' : 'sub-tree-close'\">\n            <li class=\"nh-tree-node\" *ngFor=\"let node of data\"\n                [class.selected]=\"node.isSelected\">\n                <i class=\"nh-tree-icon\"\n                   (click)=\"expand(node)\"\n                   [class.nh-tree-loading]=\"node.isLoading && node.childCount && node.childCount > 0\"\n                   [class.nh-tree-node-close]=\"!node.state.opened && ((node.childCount && node.childCount > 0) || (node.children && node.children.length > 0))\"\n                   [class.nh-tree-node-open]=\"node.state.opened && ((node.childCount && node.childCount > 0) || (node.children && node.children.length > 0))\"\n                ></i>\n                <!--<i class=\"nh-tree-icon nh-icon-checkbox nh-icon-child-check\" *ngIf=\"isMultiple\"></i>-->\n                <!-- display when has child -->\n                <a href=\"javascript://\" (click)=\"selectNode(node)\" [attr.title]=\"node.text\">\n                    <i class=\"nh-tree-icon\"\n                       [ngClass]=\"node.icon ? node.icon + ' nh-custom-icon' : 'nh-tree-icon-folder'\"></i> {{ node.text\n                    }}\n                </a>\n                <nh-tree [data]=\"node.children\" [isChildren]=\"true\" [isOpen]=\"node.state.opened\"\n                         [isMultiple]=\"isMultiple\"\n                         [lazyLoadURL]=\"lazyLoadURL\"\n                         [selectedIds]=\"selectedIds\"\n                         (onSelectNode)=\"onSelectNode.emit($event)\"></nh-tree>\n            </li>\n        </ul>\n    ","﻿import {\r\n    Component, OnInit, Input, Output, EventEmitter, ViewEncapsulation, OnChanges, SimpleChanges\r\n} from '@angular/core';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport * as _ from 'lodash';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TreeData } from '../../../view-model/tree-data';\r\n\r\n@Component({\r\n    selector: 'nh-tree',\r\n    template: `\r\n        <!-- nh tree -->\r\n        <ul [ngClass]=\"!isChildren ? 'nh-tree nh-root-tree' : 'sub-tree'\"\r\n            [@toogleTreeSubmenu]=\"isOpen ? 'sub-tree-open' : 'sub-tree-close'\">\r\n            <li class=\"nh-tree-node\" *ngFor=\"let node of data\"\r\n                [class.selected]=\"node.isSelected\">\r\n                <i class=\"nh-tree-icon\"\r\n                   (click)=\"expand(node)\"\r\n                   [class.nh-tree-loading]=\"node.isLoading && node.childCount && node.childCount > 0\"\r\n                   [class.nh-tree-node-close]=\"!node.state.opened && ((node.childCount && node.childCount > 0) || (node.children && node.children.length > 0))\"\r\n                   [class.nh-tree-node-open]=\"node.state.opened && ((node.childCount && node.childCount > 0) || (node.children && node.children.length > 0))\"\r\n                ></i>\r\n                <!--<i class=\"nh-tree-icon nh-icon-checkbox nh-icon-child-check\" *ngIf=\"isMultiple\"></i>-->\r\n                <!-- display when has child -->\r\n                <a href=\"javascript://\" (click)=\"selectNode(node)\" [attr.title]=\"node.text\">\r\n                    <i class=\"nh-tree-icon\"\r\n                       [ngClass]=\"node.icon ? node.icon + ' nh-custom-icon' : 'nh-tree-icon-folder'\"></i> {{ node.text\r\n                    }}\r\n                </a>\r\n                <nh-tree [data]=\"node.children\" [isChildren]=\"true\" [isOpen]=\"node.state.opened\"\r\n                         [isMultiple]=\"isMultiple\"\r\n                         [lazyLoadURL]=\"lazyLoadURL\"\r\n                         [selectedIds]=\"selectedIds\"\r\n                         (onSelectNode)=\"onSelectNode.emit($event)\"></nh-tree>\r\n            </li>\r\n        </ul>\r\n    `,\r\n    styleUrls: ['./nh-tree.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations: [\r\n        trigger('toogleTreeSubmenu', [\r\n            state('sub-tree-open', style({\r\n                height: '*',\r\n                opacity: '1',\r\n                display: 'block'\r\n            })),\r\n            state('sub-tree-close', style({\r\n                height: '0',\r\n                opacity: '0',\r\n                display: 'none'\r\n            })),\r\n            transition('sub-tree-open => sub-tree-close', [\r\n                animate(150, style({\r\n                    height: '0'\r\n                }))\r\n            ]),\r\n            transition('sub-tree-close => sub-tree-open', [\r\n                animate(150, style({\r\n                    height: '*'\r\n                }))\r\n            ])\r\n        ])\r\n    ]\r\n})\r\n\r\nexport class NHTreeComponent implements OnInit, OnChanges {\r\n    @Input() data: TreeData[];\r\n    @Input() isMultiple = false;\r\n    @Input() isChildren = false;\r\n    @Input() isOpen = true;\r\n    @Input() lazyLoadURL;\r\n    @Input() selectedIds = [];\r\n\r\n    @Output() onSelectNode = new EventEmitter();\r\n    @Output() onExpandNode = new EventEmitter();\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.hasOwnProperty('data')) {\r\n            const data = changes['data'].currentValue;\r\n            _.each(data, (nodeItem: TreeData) => {\r\n                nodeItem.isSelected = this.selectedIds && this.selectedIds.toString().indexOf(nodeItem.id.toString()) > -1;\r\n            });\r\n        }\r\n    }\r\n\r\n    selectNode(node: TreeData) {\r\n        if (!this.isMultiple) {\r\n            this.resetSelectedNote(this.data, null);\r\n        } else {\r\n            node.isSelected = !node.isSelected;\r\n        }\r\n        this.onSelectNode.emit(node);\r\n    }\r\n\r\n    expand(node: TreeData) {\r\n        if (this.lazyLoadURL && node.children.length === 0) {\r\n            node.isLoading = true;\r\n            const childrens = this.http.get(`${this.lazyLoadURL}${node.id}`);\r\n            childrens.subscribe((result: any) => {\r\n                node.isLoading = false;\r\n                node.children = result;\r\n            });\r\n        }\r\n        node.state.opened = !node.state.opened;\r\n        this.onExpandNode.emit(node);\r\n    }\r\n\r\n    private resetSelectedNote(treeNodes: TreeData[], parentId?: number) {\r\n        if (!treeNodes || treeNodes.length <= 0) {\r\n            return;\r\n        }\r\n\r\n        _.each(treeNodes, (node: TreeData) => {\r\n            node.isSelected = false;\r\n\r\n            if (node.parentId === parentId) {\r\n                _.each(node.children, (item: TreeData) => {\r\n                    item.isSelected = false;\r\n                    this.resetSelectedNote(item.children, item.id);\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n","﻿import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\n// Component\r\nimport { NHTreeComponent } from \"./nh-tree.component\";\r\nimport { NHDropdownTreeComponent } from \"./nh-dropdown-tree.component\";\r\n\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [\r\n        NHTreeComponent, NHDropdownTreeComponent\r\n    ],\r\n    exports: [NHTreeComponent, NHDropdownTreeComponent]\r\n})\r\n\r\nexport class NHTreeModule { }\r\n","// creating check permission decorator\r\nimport { Router } from '@angular/router';\r\nimport { IPageId } from '../../configs/page-id.config';\r\nimport { AppService } from '../services/app.service';\r\n\r\nexport function CheckPermission() {\r\n    return function (target: any) {\r\n        target.prototype.ngAfterViewInit = function ngOnInitDecorator(this: {\r\n            router: Router,\r\n            pageId: IPageId,\r\n            appService: AppService,\r\n            permission: any\r\n        }) {\r\n            setTimeout(() => {\r\n                this.permission = this.appService.getPermissionByPageId();\r\n                if (!this.permission.view) {\r\n                    this.router.navigateByUrl('/error/permission');\r\n                }\r\n            });\r\n        };\r\n\r\n        // returning the decorated class\r\n        return target;\r\n    };\r\n}\r\n"],"sourceRoot":""}