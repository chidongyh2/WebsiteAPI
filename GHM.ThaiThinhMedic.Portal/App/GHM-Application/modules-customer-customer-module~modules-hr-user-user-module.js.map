{"version":3,"sources":["webpack:///./src/app/modules/hr/user/models/user-contact.model.ts","webpack:///./src/app/modules/hr/user/models/user.model.ts","webpack:///./src/app/modules/hr/user/services/national.service.ts","webpack:///./src/app/validators/datetime.validator.ts"],"names":[],"mappings":"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","file":"modules-customer-customer-module~modules-hr-user-user-module.js","sourcesContent":["\r\nexport const  ContactType = {\r\n    homePhone : 0,\r\n    mobilePhone : 1,\r\n    email : 2,\r\n    fax: 3\r\n}\r\n\r\nexport class UserContact {\r\n    id: string;\r\n    userId: string;\r\n    contactType: number;\r\n    contactValue: string;\r\n    concurrencyStamp: string;\r\n}\r\n","﻿import {UserContact} from './user-contact.model';\r\nimport {UserTranslation} from './user-translation.model';\r\n\r\nexport const UserStatus = {\r\n    // Dịch vụ\r\n    collaborators: 0,\r\n    // Học việc\r\n    apprentice: 1,\r\n    // Thử việc\r\n    probation: 2,\r\n    // chính thức.\r\n    official: 3,\r\n    // Thai sản.\r\n    maternity: 4,\r\n    // Thôi việc.\r\n    discontinue: 5,\r\n    // Nghỉ hửu\r\n    retirement: 6\r\n};\r\n\r\nexport const UserType = {\r\n    // Nhân viên.\r\n    staff: 0,\r\n    // Trưởng đơn vị.\r\n    leader: 1,\r\n    // Phó đơn vị.\r\n    viceLeader: 2\r\n};\r\n\r\nexport const AcademicRank = {\r\n    // Thạc Sỹ\r\n    master: 0,\r\n    // Tiến sỹ\r\n    phD: 1,\r\n    // Giáo sư\r\n    professor: 2\r\n};\r\n\r\nexport const MarriedStatus = {\r\n    // Độc thân\r\n    single: 0,\r\n    // Kết hôn\r\n    married: 1,\r\n    // Ly thân\r\n    separated: 2,\r\n    // Ly hôn\r\n    divorce: 3,\r\n};\r\n\r\nexport const Gender = {\r\n    // Nam\r\n    male: 1,\r\n    // Nữ.\r\n    female: 0,\r\n    // Khác.\r\n    other: 2\r\n};\r\n\r\nexport class User {\r\n    id: string;\r\n    fullName: string;\r\n    userName: string;\r\n    avatar: string;\r\n    birthday: Date;\r\n    idCardNumber: string;\r\n    idCardDateOfIssue?: Date;\r\n    gender: number;\r\n    ethnic?: number;\r\n    denomination?: number;\r\n    tin: string;\r\n    joinedDate: Date;\r\n    bankingNumber: string;\r\n    nationalId: number;\r\n    provinceId: number;\r\n    districtId: number;\r\n    marriedStatus?: number;\r\n    officeId: number;\r\n    titleId: string;\r\n    positionId: string;\r\n    userType: number;\r\n    passportId: string;\r\n    passportDateOfIssue: Date;\r\n    enrollNumber?: number;\r\n    cardNumber: string;\r\n    ext: string;\r\n    concurrencyStamp: string;\r\n    academicRank?: number;\r\n    modelTranslations: UserTranslation[];\r\n    userContacts: UserContact[];\r\n\r\n    constructor() {\r\n        this.userType = UserType.staff;\r\n    }\r\n}\r\n","﻿import {Inject, Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {APP_CONFIG, IAppConfig} from '../../../../configs/app.config';\r\n\r\n@Injectable()\r\nexport class NationalService {\r\n    url = 'nationals/';\r\n\r\n    constructor(@Inject(APP_CONFIG) appConfig: IAppConfig,\r\n                private http: HttpClient) {\r\n        this.url = `${appConfig.CORE_API_URL}${this.url}`;\r\n    }\r\n\r\n    getAllNational(): Observable<any> {\r\n        return this.http.get(`${this.url}`);\r\n    }\r\n\r\n    getProvinceByNational(nationalId: number): Observable<any> {\r\n        return this.http.get(`${this.url}${nationalId}/provinces`);\r\n    }\r\n\r\n    getAllProvince(): Observable<any> {\r\n        return this.http.get(`${this.url}provinces`);\r\n    }\r\n\r\n    getAllDistrict(): Observable<any> {\r\n        return this.http.get(`${this.url}districts`);\r\n    }\r\n\r\n    getDistrictByProvinceId(provinceId: number): Observable<any> {\r\n        return this.http.get(`${this.url}provinces/${provinceId}/districts`);\r\n    }\r\n\r\n    searchEthnic() {\r\n        return this.http.get(`${this.url}ethnic`);\r\n    }\r\n\r\n    getAll() {\r\n        return this.http.get(`${this.url}get-all`);\r\n    }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\nimport { FormControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport * as moment from 'moment';\r\n\r\n@Injectable()\r\nexport class DateTimeValidator implements Validators {\r\n    isValid(c: FormControl) {\r\n        if (c && c.value && c.value != null) {\r\n            const isValid = moment(c.value, [\r\n                'DD/MM/YYYY',\r\n                'DD/MM/YYYY HH:mm',\r\n                'DD/MM/YYYY HH:mm:ss',\r\n                'DD/MM/YYYY HH:mm Z',\r\n                'DD-MM-YYYY',\r\n                'DD-MM-YYYY HH:mm',\r\n                'DD-MM-YYYY HH:mm:ss',\r\n                'DD-MM-YYYY HH:mm Z',\r\n                'MM/DD/YYYY',\r\n                'MM/DD/YYYY HH:mm',\r\n                'MM/DD/YYYY HH:mm:ss',\r\n                'MM/DD/YYYY HH:mm Z',\r\n                'MM-DD-YYYY',\r\n                'MM-DD-YYYY HH:mm',\r\n                'MM-DD-YYYY HH:mm:ss',\r\n                'MM-DD-YYYY HH:mm Z',\r\n            ]).isValid() || moment(c.value, [\r\n                'DD/MM/YYYY',\r\n                'DD/MM/YYYY HH:mm',\r\n                'DD/MM/YYYY HH:mm:ss',\r\n                'DD/MM/YYYY HH:mm Z',\r\n                'DD-MM-YYYY',\r\n                'DD-MM-YYYY HH:mm',\r\n                'DD-MM-YYYY HH:mm:ss',\r\n                'DD-MM-YYYY HH:mm Z',\r\n                'MM/DD/YYYY',\r\n                'MM/DD/YYYY HH:mm',\r\n                'MM/DD/YYYY HH:mm:ss',\r\n                'MM/DD/YYYY HH:mm Z',\r\n                'MM-DD-YYYY',\r\n                'MM-DD-YYYY HH:mm',\r\n                'MM-DD-YYYY HH:mm:ss',\r\n                'MM-DD-YYYY HH:mm Z',\r\n            ]).isValid();\r\n            if (!isValid) {\r\n                return { isValid: false };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    notBefore(ref: string): ValidatorFn {\r\n        return (c: FormControl) => {\r\n            const v = c.value;\r\n            const r = c.root.get(ref);\r\n\r\n            if (r && r.value) {\r\n                if (moment(v, [\r\n                    'DD/MM/YYYY',\r\n                    'DD/MM/YYYY HH:mm',\r\n                    'DD/MM/YYYY HH:mm:ss',\r\n                    'DD/MM/YYYY HH:mm Z',\r\n                    'DD-MM-YYYY',\r\n                    'DD-MM-YYYY HH:mm',\r\n                    'DD-MM-YYYY HH:mm:ss',\r\n                    'DD-MM-YYYY HH:mm Z',\r\n                    'MM/DD/YYYY',\r\n                    'MM/DD/YYYY HH:mm',\r\n                    'MM/DD/YYYY HH:mm:ss',\r\n                    'MM/DD/YYYY HH:mm Z',\r\n                    'MM-DD-YYYY',\r\n                    'MM-DD-YYYY HH:mm',\r\n                    'MM-DD-YYYY HH:mm:ss',\r\n                    'MM-DD-YYYY HH:mm Z',\r\n                ]).isBefore(moment(r.value, [\r\n                    'DD/MM/YYYY',\r\n                    'DD/MM/YYYY HH:mm',\r\n                    'DD/MM/YYYY HH:mm:ss',\r\n                    'DD/MM/YYYY HH:mm Z',\r\n                    'DD-MM-YYYY',\r\n                    'DD-MM-YYYY HH:mm',\r\n                    'DD-MM-YYYY HH:mm:ss',\r\n                    'DD-MM-YYYY HH:mm Z',\r\n                    'MM/DD/YYYY',\r\n                    'MM/DD/YYYY HH:mm',\r\n                    'MM/DD/YYYY HH:mm:ss',\r\n                    'MM/DD/YYYY HH:mm Z',\r\n                    'MM-DD-YYYY',\r\n                    'MM-DD-YYYY HH:mm',\r\n                    'MM-DD-YYYY HH:mm:ss',\r\n                    'MM-DD-YYYY HH:mm Z',\r\n                ]))) {\r\n                    return { notBefore: false };\r\n                }\r\n            }\r\n\r\n            return null;\r\n        };\r\n    }\r\n\r\n    notAfter(ref: string): ValidatorFn {\r\n        return (c: FormControl) => {\r\n            const v = c.value;\r\n            const r = c.root.get(ref);\r\n\r\n            if (r && r.value) {\r\n                if (moment(v, [\r\n                    'DD/MM/YYYY',\r\n                    'DD/MM/YYYY HH:mm',\r\n                    'DD/MM/YYYY HH:mm:ss',\r\n                    'DD/MM/YYYY HH:mm Z',\r\n                    'DD-MM-YYYY',\r\n                    'DD-MM-YYYY HH:mm',\r\n                    'DD-MM-YYYY HH:mm:ss',\r\n                    'DD-MM-YYYY HH:mm Z',\r\n                    'MM/DD/YYYY',\r\n                    'MM/DD/YYYY HH:mm',\r\n                    'MM/DD/YYYY HH:mm:ss',\r\n                    'MM/DD/YYYY HH:mm Z',\r\n                    'MM-DD-YYYY',\r\n                    'MM-DD-YYYY HH:mm',\r\n                    'MM-DD-YYYY HH:mm:ss',\r\n                    'MM-DD-YYYY HH:mm Z',\r\n                ]).isAfter(moment(r.value, [\r\n                    'DD/MM/YYYY',\r\n                    'DD/MM/YYYY HH:mm',\r\n                    'DD/MM/YYYY HH:mm:ss',\r\n                    'DD/MM/YYYY HH:mm Z',\r\n                    'DD-MM-YYYY',\r\n                    'DD-MM-YYYY HH:mm',\r\n                    'DD-MM-YYYY HH:mm:ss',\r\n                    'DD-MM-YYYY HH:mm Z',\r\n                    'MM/DD/YYYY',\r\n                    'MM/DD/YYYY HH:mm',\r\n                    'MM/DD/YYYY HH:mm:ss',\r\n                    'MM/DD/YYYY HH:mm Z',\r\n                    'MM-DD-YYYY',\r\n                    'MM-DD-YYYY HH:mm',\r\n                    'MM-DD-YYYY HH:mm:ss',\r\n                    'MM-DD-YYYY HH:mm Z',\r\n                ]))) {\r\n                    return { notAfter: false };\r\n                }\r\n            }\r\n\r\n            return null;\r\n        };\r\n    }\r\n\r\n    notEqual(ref: string): ValidatorFn {\r\n        return (c: FormControl) => {\r\n            const v = c.value;\r\n            const r = c.root.get(ref);\r\n\r\n            if (r && r.value) {\r\n                if (moment(r.value, [\r\n                    'DD/MM/YYYY',\r\n                    'DD/MM/YYYY HH:mm',\r\n                    'DD/MM/YYYY HH:mm:ss',\r\n                    'DD/MM/YYYY HH:mm Z',\r\n                    'DD-MM-YYYY',\r\n                    'DD-MM-YYYY HH:mm',\r\n                    'DD-MM-YYYY HH:mm:ss',\r\n                    'DD-MM-YYYY HH:mm Z',\r\n                    'MM/DD/YYYY',\r\n                    'MM/DD/YYYY HH:mm',\r\n                    'MM/DD/YYYY HH:mm:ss',\r\n                    'MM/DD/YYYY HH:mm Z',\r\n                    'MM-DD-YYYY',\r\n                    'MM-DD-YYYY HH:mm',\r\n                    'MM-DD-YYYY HH:mm:ss',\r\n                    'MM-DD-YYYY HH:mm Z',\r\n                ]).isSame(moment(v, [\r\n                    'DD/MM/YYYY',\r\n                    'DD/MM/YYYY HH:mm',\r\n                    'DD/MM/YYYY HH:mm:ss',\r\n                    'DD/MM/YYYY HH:mm Z',\r\n                    'DD-MM-YYYY',\r\n                    'DD-MM-YYYY HH:mm',\r\n                    'DD-MM-YYYY HH:mm:ss',\r\n                    'DD-MM-YYYY HH:mm Z',\r\n                    'MM/DD/YYYY',\r\n                    'MM/DD/YYYY HH:mm',\r\n                    'MM/DD/YYYY HH:mm:ss',\r\n                    'MM/DD/YYYY HH:mm Z',\r\n                    'MM-DD-YYYY',\r\n                    'MM-DD-YYYY HH:mm',\r\n                    'MM-DD-YYYY HH:mm:ss',\r\n                    'MM-DD-YYYY HH:mm Z',\r\n                ]))) {\r\n                    return { notEqual: false };\r\n                }\r\n            }\r\n\r\n            return null;\r\n        };\r\n    }\r\n}\r\n"],"sourceRoot":""}